generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DB_SESSION_URL")
}

model Budget {
    id               String           @id @unique @default(uuid()) @db.Uuid
    createdAt        DateTime         @default(now())
    name             String
    description      String?
    userId           String           @db.Uuid
    user             User             @relation(fields: [userId], references: [id])
    budgetCategories BudgetCategory[]
    budgetItems      BudgetItem[]
    accounts         Account[]
    assignments      Assignment[]
}

model Account {
    id             String        @id @unique @default(uuid()) @db.Uuid
    createdAt      DateTime      @default(now())
    name           String
    initialBalance Float
    budgetId       String?       @db.Uuid
    budget         Budget?       @relation(fields: [budgetId], references: [id], onDelete: Cascade)
    transactions   Transaction[]
}

// exists solely for visual and user sorting purposes
model BudgetCategory {
    id          String       @id @unique @default(uuid()) @db.Uuid
    createdAt   DateTime     @default(now())
    name        String
    deleted     Boolean      @default(false) // determines if it should appear in the budget, and if true, only use for previous transacs
    budgetItems BudgetItem[]
    budgetId    String       @db.Uuid
    budget      Budget       @relation(fields: [budgetId], references: [id], onDelete: Cascade)
    order       Int // the order in which this category appears in the budget
}

model BudgetItem {
    id               String         @id @unique @default(uuid()) @db.Uuid
    createdAt        DateTime       @default(now())
    name             String
    deleted          Boolean        @default(false) // determines if it should appear in the budget, and if true, only use for previous transacs
    target           Float
    // balance          Float  Would just be assigned - transactions
    // assigned         Float  Would just be sum of assignments
    budgetCategoryId String         @db.Uuid
    budgetCategory   BudgetCategory @relation(fields: [budgetCategoryId], references: [id])
    order            Int // the order in which this item appears in the category
    budgetId         String         @db.Uuid
    budget           Budget         @relation(fields: [budgetId], references: [id])
    transactions     Transaction[]
    assignments      Assignment[]
}

model Assignment {
    id           String     @id @unique @default(uuid()) @db.Uuid
    createdAt    DateTime   @default(now())
    amount       Float
    budgetId     String     @db.Uuid
    budget       Budget     @relation(fields: [budgetId], references: [id], onDelete: Cascade)
    budgetItemId String     @db.Uuid
    budgetItem   BudgetItem @relation(fields: [budgetItemId], references: [id])
}

model User {
    id        String   @id @unique @db.Uuid
    createdAt DateTime @default(now())
    theme     Theme    @default(DARK)
    firstName String   @db.VarChar(25)
    lastName  String   @db.VarChar(25)
    email     String
    budgets   Budget[]
}

enum Theme {
    DARK
    LIGHT
}

model Transaction {
    id           String     @id @unique @default(uuid()) @db.Uuid
    date         DateTime   @default(now())
    description  String?
    amount       Float
    accountId    String     @db.Uuid
    account      Account    @relation(fields: [accountId], references: [id], onDelete: Cascade)
    budgetItemId String     @db.Uuid
    budgetItem   BudgetItem @relation(fields: [budgetItemId], references: [id])
}
